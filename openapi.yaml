openapi: 3.0.1
info:
  title: Alte LMS Auth & Organizaitions Service
  description: Manage Users & Organizaitions
  contact:
    email: info@alte-lms.tech
  version: 1.0.0
servers:
  - url: https://api-auth.alte-lms.tech
    description: Main url
paths:
  /token:
    post:
      operationId: tokenPost
      summary: Login to LMS
      tags:
        - OAuth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                required:
                  - access_token
                properties:
                  access_token:
                    type: string
                  refresh_token:
                    type: string
                  refresh_token_expiry:
                    $ref: '#/components/schemas/Timestamp'
                  was_forced:
                    type: boolean
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '401':
          $ref: '#/components/responses/ErrorResponse'
        '403':
          $ref: '#/components/responses/ErrorResponse'
        '409':
          $ref: '#/components/responses/ErrorResponse'
        '500':
          $ref: '#/components/responses/ErrorResponse'
    get:
      operationId: tokenGet
      summary: Fetch list of tokens
      description: Returns in descending order of most recently used
      tags:
        - OAuth
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RefreshToken'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '401':
          $ref: '#/components/responses/ErrorResponse'
        '403':
          $ref: '#/components/responses/ErrorResponse'
        '500':
          $ref: '#/components/responses/ErrorResponse'
      security:
        - alte:
            - TOKENS_READ
    delete:
      operationId: tokenDelete
      summary: Revoke refresh tokens
      description: If the token is not specified, all tokens of the user are revoked
      tags:
        - OAuth
      parameters:
        - name: token
          in: query
          required: false
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Revoked
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '401':
          $ref: '#/components/responses/ErrorResponse'
        '403':
          $ref: '#/components/responses/ErrorResponse'
        '500':
          $ref: '#/components/responses/ErrorResponse'
      security:
        - alte:
            - TOKENS_DELETE
  /invite-links:
    post:
      operationId: inviteLinksPost
      summary: Create an invite link for the organization
      description: >
        To generate an invite link for a specific set of scopes, you must also
        have the same set of scopes. 

        Eg. you cannot generate a link which gives access to `MESSAGE_SEND` when
        you don't have access to `MESSAGE_SEND` yourself. 

        This is done for obvious security concerns.
      tags:
        - Invite Links
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              required:
                - scopes
              properties:
                scopes:
                  type: array
                  items:
                    $ref: '#/components/schemas/Scope'
                  minItems: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InviteLink'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '401':
          $ref: '#/components/responses/ErrorResponse'
        '403':
          $ref: '#/components/responses/ErrorResponse'
        '500':
          $ref: '#/components/responses/ErrorResponse'
      security:
        - alte:
            - ORGLINK_CREATE
  /invite-links/{id}:
    get:
      operationId: inviteLinksGet
      summary: Get info about an invite link
      tags:
        - Invite Links
      parameters:
        - name: id
          in: path
          required: true
          description: the invite link ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InviteLink'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '401':
          $ref: '#/components/responses/ErrorResponse'
        '403':
          $ref: '#/components/responses/ErrorResponse'
        '500':
          $ref: '#/components/responses/ErrorResponse'
      security:
        - alte: []
  /orgs:
    get:
      operationId: orgsGet
      summary: Fetch organiztions you have access to
      tags:
        - Orgs
      parameters:
        - name: q
          in: query
          description: Search by name, ID, invite code, etc.
          schema:
            type: string
        - name: id
          in: query
          description: Fetch specific orgs by ID
          required: false
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
              format: uuid
        - name: userId
          in: query
          description: orgs that contain this user ID
          schema:
            type: string
            format: uuid
        - name: count
          in: query
          description: The numbers of items to return
          schema:
            type: integer
            minimum: 1
            maximum: 100
        - name: page
          in: query
          description: The page number
          schema:
            type: integer
            minimum: 1
        - name: includeOrgMembers
          in: query
          description: >-
            Should include the organization members. Will only return members
            for which you have the `ORGMEMBERS_READ` scope
          schema:
            type: boolean
        - name: includeInviteLinks
          in: query
          description: >-
            Should include the invite links.  Will only return invite links for
            which you have the `ORGLINKS_READ` scope
          schema:
            type: boolean
        - name: includeTotal
          in: query
          description: include the count of the total orgs
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - orgs
                additionalProperties: false
                properties:
                  total:
                    type: number
                  orgs:
                    type: array
                    items:
                      $ref: '#/components/schemas/Organization'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '401':
          $ref: '#/components/responses/ErrorResponse'
        '403':
          $ref: '#/components/responses/ErrorResponse'
        '500':
          $ref: '#/components/responses/ErrorResponse'
      security:
        - alte: []
    post:
      operationId: orgsPost
      summary: Create an organization
      tags:
        - Orgs
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrgCreate'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - success
                properties:
                  success:
                    type: boolean
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '401':
          $ref: '#/components/responses/ErrorResponse'
        '403':
          $ref: '#/components/responses/ErrorResponse'
        '500':
          $ref: '#/components/responses/ErrorResponse'
      security:
        - alte: []
    patch:
      operationId: orgsPatch
      summary: Update the organization the access token is for
      description: >
        - If you want to update/delete members -- ensure you have the
        `ORGMEMBERS_UPDATE` scope

        - If you want to delete invite links -- ensure you have the
        `ORGLINKS_UPDATE` scope

        - Also you cannot delete/update yourself in the organization. If you
        attempt to do so, a 400 will be returned
      tags:
        - Orgs
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrgPatchRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - success
                properties:
                  success:
                    type: boolean
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '401':
          $ref: '#/components/responses/ErrorResponse'
        '403':
          $ref: '#/components/responses/ErrorResponse'
        '500':
          $ref: '#/components/responses/ErrorResponse'
      security:
        - alte:
            - ORG_UPDATE
  /orgs/join:
    post:
      operationId: orgsJoinInvite
      summary: Join a org
      tags:
        - Orgs
      parameters:
        - name: id
          in: query
          required: true
          description: inviteLink id
          schema:
            type: string
      responses:
        '204':
          description: OK
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '401':
          $ref: '#/components/responses/ErrorResponse'
        '403':
          $ref: '#/components/responses/ErrorResponse'
        '404':
          $ref: '#/components/responses/ErrorResponse'
        '500':
          $ref: '#/components/responses/ErrorResponse'
      security:
        - alte: []
  /users:
    get:
      operationId: usersGet
      summary: Fetch users you have access to
      tags:
        - Users
      parameters:
        - name: q
          in: query
          description: Search by name, ID, email, phone etc.
          schema:
            type: string
        - name: id
          in: query
          description: Fetch specific users by ID
          required: false
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
              format: uuid
        - name: count
          in: query
          description: The numbers of items to return
          schema:
            type: integer
            minimum: 1
            maximum: 100
        - name: page
          in: query
          description: The page number
          schema:
            type: integer
            minimum: 1
        - name: includeMemberships
          in: query
          description: Should include the user's memberships
          schema:
            type: boolean
        - name: includeTotal
          in: query
          description: should return total count of accessible users
          schema:
            type: boolean
            default: false
        - name: other
          in: query
          description: other internal query options
          schema:
            type: array
            items:
              type: string
              minimum: 1
              maximum: 100
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - users
                properties:
                  total:
                    type: number
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '401':
          $ref: '#/components/responses/ErrorResponse'
        '403':
          $ref: '#/components/responses/ErrorResponse'
        '500':
          $ref: '#/components/responses/ErrorResponse'
      security:
        - alte: []
    post:
      operationId: usersPost
      summary: Create a new user
      tags:
        - Users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '401':
          $ref: '#/components/responses/ErrorResponse'
        '403':
          $ref: '#/components/responses/ErrorResponse'
        '409':
          $ref: '#/components/responses/ErrorResponse'
        '500':
          $ref: '#/components/responses/ErrorResponse'
      security:
        - alte: []
    patch:
      operationId: usersPatch
      summary: Update the user in the access token
      parameters:
        - name: userId
          description: Change the password of this user ID
          in: query
          schema:
            type: string
            format: uuid
      tags:
        - Users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPatch'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      security:
        - alte:
            - USERS_PATCH
    delete:
      operationId: usersDelete
      summary: Delete a user
      description: Deletes the user specified
      parameters:
        - name: id
          in: query
          required: true
          schema:
            type: string
            format: uuid
      tags:
        - Users
      responses:
        '204':
          description: Deleted
        '401':
          $ref: '#/components/responses/ErrorResponse'
        '403':
          $ref: '#/components/responses/ErrorResponse'
        '500':
          $ref: '#/components/responses/ErrorResponse'
      security:
        - alte:
            - USER_DELETE
  /users/password:
    patch:
      operationId: usersPasswordPatch
      summary: Reset user password
      tags:
        - Users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPassword'
      responses:
        '204':
          description: OK
      security:
        - alte:
            - USER_PASS_RESET
  /notify:
    post:
      operationId: notify
      summary: Notify a organization member
      tags:
        - Notifications
      parameters:
        - name: userId
          required: true
          in: query
          schema:
            type: string
        - name: notifyWhatsApp
          description: Override notify on WhatsApp
          required: false
          in: query
          schema:
            type: boolean
            default: true
        - name: notifyEmail
          description: Override notify on Email
          required: false
          in: query
          schema:
            type: boolean
            default: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              required:
                - title
                - content
              properties:
                title:
                  type: string
                  minimum: 1
                  maximum: 128
                content:
                  type: string
                  minimum: 1
                  maximum: 8196
                parameters:
                  type: object
                  additionalProperties: {}
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                required:
                  - whatsapp
                  - email
                properties:
                  whatsapp:
                    $ref: '#/components/schemas/NotificationResult'
                  email:
                    $ref: '#/components/schemas/NotificationResult'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '401':
          $ref: '#/components/responses/ErrorResponse'
        '403':
          $ref: '#/components/responses/ErrorResponse'
        '404':
          $ref: '#/components/responses/ErrorResponse'
        '500':
          $ref: '#/components/responses/ErrorResponse'
      security:
        - alte:
            - ORG_NOTIFY
components:
  schemas:
    Scope:
      type: string
      enum:
        - TOKENS_READ
        - TOKENS_DELETE
        - USERS_PATCH
        - USERS_DELETE
        - ORG_UPDATE
        - ORGLINK_CREATE
        - ORGLINK_READ
        - ORGMEMBERS_UPDATE
        - ORGMEMBERS_READ
        - ORG_NOTIFY
        - ADMIN_PANEL_ACCESS
    JWT:
      type: object
      additionalProperties: false
      required:
        - scope
        - exp
        - iat
        - user
      properties:
        scope:
          type: string
          description: Binary representation of the scope array
          example: 1010101011
        exp:
          type: number
        iat:
          type: number
        user:
          type: object
          additionalProperties: false
          required:
            - id
            - orgId
            - email
          properties:
            id:
              type: string
            orgId:
              type: string
            firstName:
              type: string
            lastName:
              type: string
            email:
              type: number
    TokenPostResponse:
      type: object
      additionalProperties: false
      required:
        - access_token
      properties:
        access_token:
          type: string
        refresh_token:
          type: string
        refresh_token_expiry:
          $ref: '#/components/schemas/Timestamp'
    PasswordAuthRequest:
      type: object
      additionalProperties: false
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        returnRefreshToken:
          type: boolean
          default: true
        password:
          type: string
          description: This will be the base64 encoded SHA256 of the plaintext password
        orgId:
          type: string
          description: >-
            The organization ID to generate the token for, lastUsedOrgId will be
            used otherwise
        scopes:
          type: array
          items:
            $ref: '#/components/schemas/Scope'
        updateLastUsedOrgId:
          type: boolean
          description: >-
            Should logging in with this organization ID update the lastUsedOrgId
            for login
          default: false
        force:
          type: boolean
          description: Force the generation of an access token
          default: false
    RefreshTokenLoginRequest:
      type: object
      additionalProperties: false
      required:
        - refreshToken
        - orgId
      properties:
        refreshToken:
          type: string
        orgId:
          type: string
          description: >-
            The organization ID to generate the token for, lastUsedOrgId will be
            used otherwise
        scopes:
          type: array
          items:
            $ref: '#/components/schemas/Scope'
        updateLastUsedOrgId:
          type: boolean
          description: >-
            Should fetching the token of a new organization update the
            lastUsedOrgId for login
          default: false
        force:
          type: boolean
          description: Force the generation of an access token
          default: false
    AuthRequest:
      oneOf:
        - $ref: '#/components/schemas/PasswordAuthRequest'
        - $ref: '#/components/schemas/RefreshTokenLoginRequest'
      discriminator:
        propertyName: email
      example:
        email: alte@lms.edu
        password: abcd
        scopes:
          - TOKENS_READ
    OAuthRequest:
      type: object
      additionalProperties: false
      required:
        - email
        - password
      properties:
        email:
          type: string
          description: The email
          example: alte@lms.edu
        password:
          type: string
          description: Plaintext password
        grant_type:
          type: string
          enum:
            - password
        scope:
          type: string
          description: Space separated scopes
          example: TOKENS_READ
    RefreshToken:
      type: object
      additionalProperties: false
      description: >
        A refresh token allows you to generate access tokens to access & update
        things on Alte services.

        A refresh token will expire and become invalidated after 14 days of no
        activity.
      required:
        - token
        - userId
        - createdAt
        - expiresAt
      properties:
        token:
          type: string
        userId:
          type: string
        createdAt:
          $ref: '#/components/schemas/Timestamp'
        expiresAt:
          $ref: '#/components/schemas/Timestamp'
    NotifyModel:
      type: object
      additionalProperties: false
      properties:
        email:
          type: boolean
    ResetPassword:
      type: object
      required:
        - password
      properties:
        password:
          type: string
    UserPatch:
      type: object
      additionalProperties: false
      properties:
        firstName:
          maxLength: 100
          minLength: 1
          type: string
          example: Somebody
        lastName:
          maxLength: 100
          minLength: 1
          type: string
          example: Somebody
        email:
          type: string
          format: email
        notify:
          $ref: '#/components/schemas/NotifyModel'
        password:
          type: string
          description: new password.
        dob:
          $ref: '#/components/schemas/Timestamp'
        gender:
          type: string
          enum:
            - Male
            - Female
            - Other
        location:
          type: string
          example: Accra, Ghana
        phone:
          type: string
          example: '+23302000000000'
    UserCreate:
      type: object
      additionalProperties: false
      required:
        - firstName
        - lastName
        - email
        - password
        - dob
      properties:
        firstName:
          maxLength: 100
          minLength: 1
          type: string
          example: Somebody
        lastName:
          maxLength: 100
          minLength: 1
          type: string
          example: Somebody
        email:
          type: string
          format: email
          example: alte@lms.edu
        password:
          type: string
          minLength: 24
          maxLength: 64
          description: SHA256 of the plaintext password pls
        notify:
          $ref: '#/components/schemas/NotifyModel'
        dob:
          $ref: '#/components/schemas/Timestamp'
        gender:
          type: string
          enum:
            - Male
            - Female
            - Other
        location:
          type: string
          example: Accra, Ghana
        phone:
          type: string
          example: '+2332000000000'
        referralCode:
          type: string
          description: Sign up with a referral code
    UserCreateMethod:
      type: string
      enum:
        - admin-panel
        - alte
    User:
      type: object
      additionalProperties: false
      required:
        - id
        - createdAt
        - updatedAt
        - firstName
        - lastName
        - email
      properties:
        id:
          type: string
          format: uuid
        createdAt:
          $ref: '#/components/schemas/Timestamp'
        updatedAt:
          $ref: '#/components/schemas/Timestamp'
        disabledAt:
          $ref: '#/components/schemas/Timestamp'
        firstName:
          maxLength: 100
          minLength: 1
          type: string
          example: Somebody
        lastName:
          maxLength: 100
          minLength: 1
          type: string
          example: Somebody
        email:
          type: string
          format: email
          example: alte@lms.edu
        lastUsedOrgId:
          type: string
          format: uuid
          description: >-
            The last used organization ID, your refresh token when logging in is
            generated for this organization
        location:
          type: string
          example: Accra, Ghana
        gender:
          type: string
          enum:
            - Male
            - Female
            - Other
        phone:
          type: string
          description: Will only contain numbers, no + sign, brackets etc.
          example: '+911234567789'
        createdByMethod:
          $ref: '#/components/schemas/UserCreateMethod'
        notify:
          $ref: '#/components/schemas/NotifyModel'
        referralCode:
          nullable: true
          description: The referral code used for sign-up
          type: string
        memberships:
          type: array
          items:
            $ref: '#/components/schemas/OrgMember'
    OrgMember:
      type: object
      additionalProperties: false
      required:
        - scopes
        - addedAt
        - userId
        - orgId
      properties:
        org:
          $ref: '#/components/schemas/Organization'
        user:
          $ref: '#/components/schemas/User'
        userId:
          type: string
        orgId:
          type: string
        addedAt:
          $ref: '#/components/schemas/Timestamp'
        addedBy:
          nullable: true
          type: string
        role:
          type: string
          enum:
            - admin
            - hr
            - mentor
            - student
            - sudo
        scopes:
          type: array
          items:
            $ref: '#/components/schemas/Scope'
    OrgCreate:
      type: object
      additionalProperties: false
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        url:
          type: string
          format: uri
        mode:
          type: string
          enum:
            - online
            - traditional
            - hybrid
        isHiring:
          type: boolean
        isAdmitting:
          type: boolean
        plan:
          type: string
          description: organization subscription plan, enums TBD
    OrgMetadata:
      type: object
      additionalProperties: false
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        url:
          type: string
          format: uri
        mode:
          type: string
          enum:
            - online
            - traditional
            - hybrid
        isHiring:
          type: boolean
        isAdmitting:
          type: boolean
        plan:
          type: string
          description: organization subscription plan, enums TBD
    InviteLink:
      type: object
      required:
        - id
        - orgId
        - createdBy
        - createdAt
        - expiresAt
        - scopes
      properties:
        id:
          type: string
        orgId:
          type: string
          description: The org it can join
        createdBy:
          type: string
          format: uuid
          description: User ID of the person who created the link
        createdAt:
          $ref: '#/components/schemas/Timestamp'
        expiresAt:
          $ref: '#/components/schemas/Timestamp'
        scopes:
          type: array
          description: The scopes allowed for the invite link
          items:
            $ref: '#/components/schemas/Scope'
    Organization:
      type: object
      additionalProperties: false
      required:
        - id
        - createdAt
        - updatedAt
        - name
        - scopes
      properties:
        id:
          type: string
          format: uuid
        createdAt:
          $ref: '#/components/schemas/Timestamp'
        updatedAt:
          $ref: '#/components/schemas/Timestamp'
        createdBy:
          type: string
          format: uuid
          description: Who created the Organization
        name:
          type: string
        email:
          type: string
          format: email
        url:
          type: string
          format: uri
        mode:
          type: string
          enum:
            - online
            - traditional
            - hybrid
        isHiring:
          type: boolean
        isAdmitting:
          type: boolean
        plan:
          type: string
          description: organization subscription plan, enums TBD
        inviteLinks:
          type: array
          items:
            $ref: '#/components/schemas/InviteLink'
    OrgPatchRequest:
      type: object
      additionalProperties: false
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        url:
          type: string
          format: uri
        mode:
          type: string
          enum:
            - online
            - traditional
            - hybrid
        isHiring:
          type: boolean
        isAdmitting:
          type: boolean
        members:
          type: array
          items:
            type: object
            required:
              - id
            additionalProperties: false
            properties:
              id:
                type: string
                format: uuid
              scopes:
                type: array
                items:
                  $ref: '#/components/schemas/Scope'
              delete:
                description: If set, will delete the organization member
                type: boolean
                enum:
                  - true
        inviteLinks:
          type: array
          items:
            type: object
            required:
              - id
            additionalProperties: false
            properties:
              id:
                type: string
              delete:
                description: If set, will delete the invite link
                type: boolean
                enum:
                  - true
    Timestamp:
      type: string
      format: date-time
    NotificationResult:
      oneOf:
        - type: string
          description: The error message when sending
        - type: boolean
          description: |
            If "false", this channel was not used. 
            If "true" -- then the channel was successfully sent to
  responses:
    ErrorResponse:
      description: There was an error
      content:
        application/json:
          schema:
            type: object
            properties:
              statusCode:
                type: number
                minimum: 200
                maximum: 505
              error:
                type: string
                description: Specific description of the error
              message:
                type: string
                description: What the error was
              data:
                type: object
                description: Some extra information about the error
  securitySchemes:
    alte:
      type: oauth2
      flows:
        password:
          tokenUrl: https://api-auth.alte-lms.tech/oauth2/token
          scopes:
            TOKENS_READ: Read all tokens belonging to your account
            TOKENS_DELETE: Delete a token belonging to your account
            USERS_PATCH: Update your personal info
            USERS_DELETE: Delete your account
            ORG_UPDATE: Modify the details of the Organization
            ORGLINK_CREATE: Create a new invite link for the organization
            ORGLINK_READ: Read invite links of the Organization
            ORGMEMBERS_UPDATE: Update/delete Organization members
            ORGMEMBERS_READ: Read the members of your Organization
            ORG_NOTIFY: Allow the notifying of Organizations
            ADMIN_PANEL_ACCESS: Access admin level functionality
